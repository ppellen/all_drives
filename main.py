# This is a Python script.# Press Maj+F10 to execute it or replace it with your code.# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.# https://stackoverflow.com/questions/41171791/how-to-suppress-or-capture-the-output-of-subprocess-runfrom os import chdir, walk, sep, stat, getcwd, listdirfrom os.path import islink, isfile, isdir, splitextfrom shutil import disk_usagefrom discover_disk import discover_diskfrom utildb.models import db, Disk, Folder, File, Extensiontest1 = Falseif test1 :    external_disk_name, this_mountpoint = discover_disk()    if external_disk_name is None or this_mountpoint is None :        exit()    print(external_disk_name, this_mountpoint)    gen_folder = this_mountpoint #  '/home/pp/dev/sw/PycharmProjects/'  # '/home/pp/dev/sw/PycharmProjects/all_drives/'    # '/home/pp/dev/sw/'    current_dir = getcwd()    chdir(gen_folder)    myFileList = []    for root, dirs, files in walk('.'):        for name in files:            if False:                extension = name.split('.')[-1]                if extension in ("py",):                    myFileList.append((root, name))            myFileList.append((root, name))    chdir(current_dir)    if len(myFileList) > 0:        f_out = open('output.txt', 'w')        for f in myFileList:            this_file = f[0] + sep + f[1]            f_out.write(this_file+'\n')        f_out.close()    exit()def print_hi(name):    # Use a breakpoint in the code line below to debug your script.    print(f'Hi, {name}')  # Press Ctrl+F8 to toggle the breakpoint.class data_file(object):    def __init__(self, root, name):        self.root = root        self.name = name        self.fullname = root+sep+name        self.statinfo = stat(self.fullname, follow_symlinks=False)        with open(self.fullname, "rb") as this_opened_file:            buf = this_opened_file.read()            self.digest = hashlib.md5(buf)def process_file( current_folder, this_file, current_folder_inst ):    must_create_extension = False    this_extension_inst = None  # inst : instance    filename_wo_extension, extension_txt = splitext(this_file)    if len(extension_txt) != 0:        if extension_txt[0] == '.':            extension_txt = extension_txt[1:]    try:        this_extension_inst = Extension.get(Extension.extension==extension_txt)    except Exception as e:        # print(repr(e))        this_extension_inst = Extension.create(extension=extension_txt, count=0, size=0)        this_extension_inst.save()        # raise(e)    # extension = ForeignKeyField(Extension, backref='files')    file_data = data_file(current_folder,this_file)    file_inst = File.create(folder_id= current_folder_inst.id,                          extension=this_extension_inst.id,                          file_name=this_file,                          file_size=file_data.statinfo.st_size,                          # datetime.fromtimestamp(statinfo.st_atime, tz=timezone.utc),                          file_last_access =       datetime.fromtimestamp(file_data.statinfo.st_atime, tz=timezone.utc),                          file_last_modif =        datetime.fromtimestamp(file_data.statinfo.st_mtime, tz=timezone.utc),                          file_meta_change =       datetime.fromtimestamp(file_data.statinfo.st_ctime, tz=timezone.utc),                          hexdigest =              file_data.digest.hexdigest()    )    file_inst.save()    this_extension_inst.size += file_data.statinfo.st_size    this_extension_inst.count += 1    this_extension_inst.save()def process_folder( upper_folder_name, this_folder, parent_inst, disk_id = None ):    # 1 - create this folder in db    if disk_id is not None:        parent_id = 0        parent_folder_inst = None        mat_path = str(disk_id)    else:        parent_id = parent_inst.id        parent_folder_inst = parent_inst        mat_path = parent_inst.mat_path + '.' + str(parent_inst.id)    current_folder = upper_folder_name+sep+this_folder    stat_info = stat(current_folder, follow_symlinks=False)    current_folder_inst = Folder.create(        parent_id = parent_id,        parent_folder = parent_folder_inst,        mat_path = mat_path,        folder_name= this_folder,        folder_last_access = datetime.fromtimestamp(stat_info.st_atime, tz=timezone.utc),        folder_last_modif  = datetime.fromtimestamp(stat_info.st_mtime, tz=timezone.utc),        folder_meta_change = datetime.fromtimestamp(stat_info.st_ctime, tz=timezone.utc)    )    current_folder_inst.save()    # 2 - process files in this folder    list_of_files = [name_ for name_ in listdir(current_folder) if isfile(current_folder + sep+ name_) ]    for _file in list_of_files:        process_file( current_folder, _file, current_folder_inst)    # 2 - process folders below.    list_of_folders = [ name_ for name_  in listdir(current_folder) if isdir(current_folder + sep + name_)]    for folder_below in list_of_folders:        process_folder(current_folder, folder_below, current_folder_inst)# Press the green button in the gutter to run the script.if __name__ == '__main__':    print_hi('PyCharm')    from datetime import datetime, timezone    import hashlib    db.connect(reuse_if_open=True)    try:        db.create_tables([Disk, Folder, File, Extension])    except Exception as error:        print(error.args)  # ("'str' object has no attribute '_meta'",)        # raise(error)    finally:        pass    current_dir = getcwd()    test = True    if not test:        external_disk_name, this_mountpoint = discover_disk()        if external_disk_name is None or this_mountpoint is None:            exit()    else:        this_mountpoint = "/home/pp/dev/sw/PycharmProjects/all_drives/test"        external_disk_name = "test"    chdir(this_mountpoint)    disk_inst = Disk.create( external_disk_name = external_disk_name,                           mountpoint         = this_mountpoint)    disk_inst.save()    process_folder(this_mountpoint, '', 0, disk_inst.id)    # statinfo = stat(this_mountpoint, follow_symlinks=False)    # root_folder_inst = Folder.create(disk_id = disk_inst.id,    #                      parent_id = 0,    #                      folder_name = disk_inst.mountpoint,    #                      folder_last_access = datetime.fromtimestamp(statinfo.st_atime, tz=timezone.utc), # stat.st_atime    #                      folder_last_modif = datetime.fromtimestamp(statinfo.st_mtime, tz=timezone.utc), # stat.st_mtime    #                      folder_meta_change = datetime.fromtimestamp(statinfo.st_ctime, tz=timezone.utc) # stat.st_ctime    # )    chdir(current_dir)    exit()    # gen_folder = '/home/pp/dev/sw/PycharmProjects/'    # '/home/pp/dev/sw/PycharmProjects/all_drives/'    # '/home/pp/dev/sw/'    gen_folder = this_mountpoint    chdir(gen_folder)    myFileList=[]    nombre_max = 20    nombre_max_atteint = False    for root, dirs, files in walk('.'):        if nombre_max_atteint :            break        for name in files:            extension = name.split('.')[-1]            if extension in ("py",):                myFileList.append((root, name))                nombre_max -= 1                if nombre_max == 0:                    nombre_max_atteint = True                    break    if len(myFileList) > 0:        for f in myFileList:            this_file = f[0]+sep+f[1]            if not islink(this_file):                data = data_file(f[0], f[1])                print(data.fullname,                      data.digest.hexdigest(),                      data.statinfo.st_size,                      datetime.fromtimestamp(data.statinfo.st_atime, tz=timezone.utc).strftime('%Y-%m-%d %H:%M'),                      datetime.fromtimestamp(data.statinfo.st_mtime, tz=timezone.utc).strftime('%Y-%m-%d %H:%M'),                      datetime.fromtimestamp(data.statinfo.st_ctime, tz=timezone.utc).strftime('%Y-%m-%d %H:%M'))                #                # statinfo = stat(this_file, follow_symlinks=False)                # with open(this_file, "rb") as this_opened_file:                #     buf = this_opened_file.read()                #     digest = hashlib.md5(buf)                #     print(this_file, digest.hexdigest(), statinfo.st_size,                #           datetime.fromtimestamp(statinfo.st_atime, tz=timezone.utc).strftime('%Y-%m-%d %H:%M'),                #           datetime.fromtimestamp(statinfo.st_mtime, tz=timezone.utc).strftime('%Y-%m-%d %H:%M'),                #           datetime.fromtimestamp(statinfo.st_ctime, tz=timezone.utc).strftime('%Y-%m-%d %H:%M'))# stat.ST_SIZE    Size in bytes of a plain file; amount of data waiting on some special files.# stat.ST_ATIME   Time of last access.# stat.ST_MTIME   Time of last modification.# stat.ST_CTIME   The “ctime” as reported by the operating system. On some systems (like Unix) is the time of the last metadata change, ...#                      ctime: the last time that the attributes of a file have changed.# See PyCharm help at https://www.jetbrains.com/help/pycharm/